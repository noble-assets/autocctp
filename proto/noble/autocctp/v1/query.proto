syntax = "proto3";

package noble.autocctp.v1;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "autocctp.dev/types";

service Query {
  // Queries Address.
  rpc Address(QueryAddress) returns (QueryAddressResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http) = {
      get: "/noble/autocctp/v1/address/{destination_domain}/{mint_recipient}/{fallback_recipient}"
      additional_bindings: {get: "/noble/autocctp/v1/address/{destination_domain}/{mint_recipient}/{fallback_recipient}/{destination_caller}"}
    };
  }
  // Queries Stats.
  rpc Stats(QueryStats) returns (QueryStatsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/autocctp/v1/stats";
  }
  // Queries StatsByDestinationDomain.
  rpc StatsByDestinationDomain(QueryStatsByDestinationDomain) returns (QueryStatsByDestinationDomainResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/autocctp/v1/stats/{destination_domain}";
  }
}

// QueryAddress is the request message for querying an AutoCCTP address.
message QueryAddress {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // The receiving chain identifier according to Circle's CCTP.
  uint32 destination_domain = 1;
  // The transfer recipient.
  string mint_recipient = 2;
  // A Noble address used to recover funds in case of errors during the transfer.
  string fallback_recipient = 3;
  // If specified, represents the only address allowed to complete the transfer on the
  // destination domain.
  string destination_caller = 4;
}

// QueryAddressResponse is the response message containing the AutoCCTP address
// and existence status.
message QueryAddressResponse {
  // The AutoCCTP address associated with the inputs parameters.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // A flag indicating wether or not the address is associated with a registered account.
  bool exists = 2 [(amino.dont_omitempty) = true];
}

// QueryStats is the request message for querying module stats.
message QueryStats {}

// QueryStatsResponse is the response message containing stats for all domains.
message QueryStatsResponse {
  // A map of domain stats keyed by destination domain.
  map<uint32, DomainStats> destination_domain_stats = 1 [(gogoproto.nullable) = false];
}

// DomainStats contains the stats for a specific domain.
message DomainStats {
  // The number of AutoCCTP accounts created.
  uint64 accounts = 1 [(amino.dont_omitempty) = true];
  // The number of transfers executed.
  uint64 transfers = 2 [(amino.dont_omitempty) = true];
  // The total amount transferred.
  uint64 total_transferred = 3 [(amino.dont_omitempty) = true];
}

// QueryStatsByDestinationDomain is the request message for querying stats by a specific destination domain.
message QueryStatsByDestinationDomain {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // The destination domain for which stats are requested.
  uint32 destination_domain = 1;
}

// QueryStatsByDestinationDomainResponse is the response message containing stats for a
// specific destination domain.
message QueryStatsByDestinationDomainResponse {
  // The number of AutoCCTP accounts created.
  uint64 accounts = 1 [(amino.dont_omitempty) = true];
  // The number of transfers executed.
  uint64 transfers = 2 [(amino.dont_omitempty) = true];
  // The total amount transferred.
  uint64 total_transferred = 3 [(amino.dont_omitempty) = true];
}
