syntax = "proto3";

package noble.autocctp.v1;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "autocctp.dev/types";

service Query {
  // Description for address
  rpc Address(QueryAddress) returns (QueryAddressResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http) = {
      // Is this used?
      get: "/noble/autocctp/v1/address/{destination_domain}/{mint_recipient}/{fallback_recipient}"
      // And this?
      additional_bindings: {get: "/noble/autocctp/v1/address/{destination_domain}/{mint_recipient}/{fallback_recipient}/{destination_caller}"}
    };
  }
  rpc Stats(QueryStats) returns (QueryStatsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/autocctp/v1/stats";
  }
  rpc StatsByDestinationDomain(QueryStatsByDestinationDomain) returns (QueryStatsByDestinationDomainResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/autocctp/v1/stats/{destination_domain}";
  }
}

// We need these info
message QueryAddress {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // This is very important
  uint32 destination_domain = 1;
  // Also this is very important
  string mint_recipient = 2;
  string fallback_recipient = 3;
  string destination_caller = 4;
}

// One reponse
message QueryAddressResponse {
  // Nice, we have it
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool exists = 2 [(amino.dont_omitempty) = true];
}

message QueryStats {}

message QueryStatsResponse {
  map<uint32, DomainStats> stats = 1 [(gogoproto.nullable) = false];
}

message QueryStatsByDestinationDomain {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint32 destination_domain = 1;
}

message QueryStatsByDestinationDomainResponse {
  uint64 accounts = 1 [(amino.dont_omitempty) = true];
  uint64 transfers = 2 [(amino.dont_omitempty) = true];
  uint64 total_transferred = 3 [(amino.dont_omitempty) = true];
}

message DomainStats {
  uint64 accounts = 1 [(amino.dont_omitempty) = true];
  uint64 transfers = 2 [(amino.dont_omitempty) = true];
  uint64 total_transferred = 3 [(amino.dont_omitempty) = true];
}
