// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/autocctp/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAddress is the request message for querying an AutoCCTP address.
type QueryAddress struct {
	// The receiving chain identifier according to Circle's CCTP.
	DestinationDomain uint32 `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	// The transfer recipient.
	MintRecipient string `protobuf:"bytes,2,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	// A Noble address used to recover funds in case of errors during the transfer.
	FallbackRecipient string `protobuf:"bytes,3,opt,name=fallback_recipient,json=fallbackRecipient,proto3" json:"fallback_recipient,omitempty"`
	// If specified, represents the only address allowed to complete the transfer on the
	// destination domain.
	DestinationCaller string `protobuf:"bytes,4,opt,name=destination_caller,json=destinationCaller,proto3" json:"destination_caller,omitempty"`
}

func (m *QueryAddress) Reset()         { *m = QueryAddress{} }
func (m *QueryAddress) String() string { return proto.CompactTextString(m) }
func (*QueryAddress) ProtoMessage()    {}
func (*QueryAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{0}
}
func (m *QueryAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddress.Merge(m, src)
}
func (m *QueryAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddress proto.InternalMessageInfo

// QueryAddressResponse is the response message containing the AutoCCTP address
// and existence status.
type QueryAddressResponse struct {
	// The AutoCCTP address associated with the inputs parameters.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// A flag indicating wether or not the address is associated with a registered account.
	Exists bool `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryAddressResponse) Reset()         { *m = QueryAddressResponse{} }
func (m *QueryAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressResponse) ProtoMessage()    {}
func (*QueryAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{1}
}
func (m *QueryAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressResponse.Merge(m, src)
}
func (m *QueryAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressResponse proto.InternalMessageInfo

func (m *QueryAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// QueryStats is the request message for querying module stats.
type QueryStats struct {
}

func (m *QueryStats) Reset()         { *m = QueryStats{} }
func (m *QueryStats) String() string { return proto.CompactTextString(m) }
func (*QueryStats) ProtoMessage()    {}
func (*QueryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{2}
}
func (m *QueryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStats.Merge(m, src)
}
func (m *QueryStats) XXX_Size() int {
	return m.Size()
}
func (m *QueryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStats proto.InternalMessageInfo

// QueryStatsResponse is the response message containing stats for all domains.
type QueryStatsResponse struct {
	// A map of domain stats keyed by destination domain.
	DestinationDomainStats map[uint32]DomainStats `protobuf:"bytes,1,rep,name=destination_domain_stats,json=destinationDomainStats,proto3" json:"destination_domain_stats" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryStatsResponse) Reset()         { *m = QueryStatsResponse{} }
func (m *QueryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse) ProtoMessage()    {}
func (*QueryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{3}
}
func (m *QueryStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse.Merge(m, src)
}
func (m *QueryStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse proto.InternalMessageInfo

func (m *QueryStatsResponse) GetDestinationDomainStats() map[uint32]DomainStats {
	if m != nil {
		return m.DestinationDomainStats
	}
	return nil
}

// DomainStats contains the stats for a specific domain.
type DomainStats struct {
	// The number of AutoCCTP accounts created.
	Accounts uint64 `protobuf:"varint,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// The number of transfers executed.
	Transfers uint64 `protobuf:"varint,2,opt,name=transfers,proto3" json:"transfers,omitempty"`
	// The total amount transferred.
	TotalTransferred uint64 `protobuf:"varint,3,opt,name=total_transferred,json=totalTransferred,proto3" json:"total_transferred,omitempty"`
}

func (m *DomainStats) Reset()         { *m = DomainStats{} }
func (m *DomainStats) String() string { return proto.CompactTextString(m) }
func (*DomainStats) ProtoMessage()    {}
func (*DomainStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{4}
}
func (m *DomainStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainStats.Merge(m, src)
}
func (m *DomainStats) XXX_Size() int {
	return m.Size()
}
func (m *DomainStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainStats.DiscardUnknown(m)
}

var xxx_messageInfo_DomainStats proto.InternalMessageInfo

func (m *DomainStats) GetAccounts() uint64 {
	if m != nil {
		return m.Accounts
	}
	return 0
}

func (m *DomainStats) GetTransfers() uint64 {
	if m != nil {
		return m.Transfers
	}
	return 0
}

func (m *DomainStats) GetTotalTransferred() uint64 {
	if m != nil {
		return m.TotalTransferred
	}
	return 0
}

// QueryStatsByDestinationDomain is the request message for querying stats by a specific destination domain.
type QueryStatsByDestinationDomain struct {
	// The destination domain for which stats are requested.
	DestinationDomain uint32 `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
}

func (m *QueryStatsByDestinationDomain) Reset()         { *m = QueryStatsByDestinationDomain{} }
func (m *QueryStatsByDestinationDomain) String() string { return proto.CompactTextString(m) }
func (*QueryStatsByDestinationDomain) ProtoMessage()    {}
func (*QueryStatsByDestinationDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{5}
}
func (m *QueryStatsByDestinationDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsByDestinationDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsByDestinationDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsByDestinationDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsByDestinationDomain.Merge(m, src)
}
func (m *QueryStatsByDestinationDomain) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsByDestinationDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsByDestinationDomain.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsByDestinationDomain proto.InternalMessageInfo

// QueryStatsByDestinationDomainResponse is the response message containing stats for a
// specific destination domain.
type QueryStatsByDestinationDomainResponse struct {
	// The number of AutoCCTP accounts created.
	Accounts uint64 `protobuf:"varint,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// The number of transfers executed.
	Transfers uint64 `protobuf:"varint,2,opt,name=transfers,proto3" json:"transfers,omitempty"`
	// The total amount transferred.
	TotalTransferred uint64 `protobuf:"varint,3,opt,name=total_transferred,json=totalTransferred,proto3" json:"total_transferred,omitempty"`
}

func (m *QueryStatsByDestinationDomainResponse) Reset()         { *m = QueryStatsByDestinationDomainResponse{} }
func (m *QueryStatsByDestinationDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsByDestinationDomainResponse) ProtoMessage()    {}
func (*QueryStatsByDestinationDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_483d98375be4f886, []int{6}
}
func (m *QueryStatsByDestinationDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsByDestinationDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsByDestinationDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsByDestinationDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsByDestinationDomainResponse.Merge(m, src)
}
func (m *QueryStatsByDestinationDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsByDestinationDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsByDestinationDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsByDestinationDomainResponse proto.InternalMessageInfo

func (m *QueryStatsByDestinationDomainResponse) GetAccounts() uint64 {
	if m != nil {
		return m.Accounts
	}
	return 0
}

func (m *QueryStatsByDestinationDomainResponse) GetTransfers() uint64 {
	if m != nil {
		return m.Transfers
	}
	return 0
}

func (m *QueryStatsByDestinationDomainResponse) GetTotalTransferred() uint64 {
	if m != nil {
		return m.TotalTransferred
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryAddress)(nil), "noble.autocctp.v1.QueryAddress")
	proto.RegisterType((*QueryAddressResponse)(nil), "noble.autocctp.v1.QueryAddressResponse")
	proto.RegisterType((*QueryStats)(nil), "noble.autocctp.v1.QueryStats")
	proto.RegisterType((*QueryStatsResponse)(nil), "noble.autocctp.v1.QueryStatsResponse")
	proto.RegisterMapType((map[uint32]DomainStats)(nil), "noble.autocctp.v1.QueryStatsResponse.DestinationDomainStatsEntry")
	proto.RegisterType((*DomainStats)(nil), "noble.autocctp.v1.DomainStats")
	proto.RegisterType((*QueryStatsByDestinationDomain)(nil), "noble.autocctp.v1.QueryStatsByDestinationDomain")
	proto.RegisterType((*QueryStatsByDestinationDomainResponse)(nil), "noble.autocctp.v1.QueryStatsByDestinationDomainResponse")
}

func init() { proto.RegisterFile("noble/autocctp/v1/query.proto", fileDescriptor_483d98375be4f886) }

var fileDescriptor_483d98375be4f886 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xee, 0x94, 0x96, 0x8f, 0x01, 0x0c, 0x9d, 0x10, 0xb3, 0x2e, 0x76, 0x8b, 0x6b, 0x1a, 0x89,
	0x91, 0xae, 0x54, 0x0f, 0x84, 0x1b, 0x15, 0x7f, 0x80, 0x8b, 0x26, 0x86, 0x4b, 0x33, 0xec, 0x0e,
	0xcd, 0xca, 0x76, 0xa6, 0xee, 0x4c, 0x1b, 0x1b, 0xd2, 0x83, 0x7a, 0xc1, 0x9b, 0x89, 0x7f, 0x80,
	0xc4, 0x83, 0x1e, 0x3d, 0xf8, 0x0b, 0x4c, 0x4c, 0x38, 0x78, 0x40, 0xbd, 0x78, 0x32, 0x06, 0x4c,
	0xf4, 0xe0, 0x8f, 0x30, 0x3b, 0xfb, 0xd1, 0x85, 0x2d, 0x55, 0x0e, 0xc6, 0x4b, 0xb3, 0xf3, 0x3e,
	0xcf, 0xfb, 0xf5, 0xcc, 0x3b, 0x6f, 0x61, 0x91, 0xb2, 0x4d, 0x97, 0x18, 0xb8, 0x2d, 0x98, 0x65,
	0x89, 0x96, 0xd1, 0x59, 0x32, 0x1e, 0xb6, 0x89, 0xd7, 0xad, 0xb4, 0x3c, 0x26, 0x18, 0x2a, 0x48,
	0xb8, 0x12, 0xc1, 0x95, 0xce, 0x92, 0x5a, 0xc0, 0x4d, 0x87, 0x32, 0x43, 0xfe, 0x06, 0x2c, 0x75,
	0xce, 0x62, 0xbc, 0xc9, 0x78, 0xe0, 0x79, 0x22, 0x84, 0x7a, 0x21, 0x00, 0xeb, 0xf2, 0x64, 0x04,
	0x87, 0x10, 0x9a, 0x6d, 0xb0, 0x06, 0x0b, 0xec, 0xfe, 0x57, 0x68, 0xbd, 0xd8, 0x60, 0xac, 0xe1,
	0xd7, 0xd4, 0x72, 0x0c, 0x4c, 0x29, 0x13, 0x58, 0x38, 0x8c, 0x86, 0x3e, 0xfa, 0x07, 0x00, 0xa7,
	0xee, 0xf8, 0xe1, 0x57, 0x6d, 0xdb, 0x23, 0x9c, 0xa3, 0x45, 0x88, 0x6c, 0xc2, 0x85, 0x43, 0x25,
	0xad, 0x6e, 0xb3, 0x26, 0x76, 0xa8, 0x02, 0xe6, 0xc1, 0xc2, 0xb4, 0x59, 0x48, 0x20, 0x6b, 0x12,
	0x40, 0x65, 0x78, 0xae, 0xe9, 0x50, 0x51, 0xf7, 0x88, 0xe5, 0xb4, 0x1c, 0x42, 0x85, 0x92, 0x9d,
	0x07, 0x0b, 0x13, 0xe6, 0xb4, 0x6f, 0x35, 0x23, 0xa3, 0x1f, 0x75, 0x0b, 0xbb, 0xee, 0x26, 0xb6,
	0xb6, 0x13, 0xd4, 0x11, 0x49, 0x2d, 0x44, 0xc8, 0x31, 0x7a, 0xb2, 0x08, 0x0b, 0xbb, 0x2e, 0xf1,
	0x94, 0x5c, 0x40, 0x4f, 0x20, 0xb7, 0x24, 0xb0, 0x32, 0xbe, 0xbb, 0x57, 0xca, 0xfc, 0xdc, 0x2b,
	0x65, 0x74, 0x07, 0xce, 0x26, 0xbb, 0x31, 0x09, 0x6f, 0x31, 0xca, 0x09, 0xaa, 0xc2, 0x31, 0x1c,
	0x98, 0x64, 0x2b, 0x13, 0x35, 0xe5, 0xd3, 0xdb, 0xc5, 0xd9, 0x50, 0xbd, 0x90, 0xbc, 0x2e, 0x3c,
	0x87, 0x36, 0xcc, 0x88, 0x88, 0x8a, 0x70, 0x94, 0x3c, 0x72, 0xb8, 0xe0, 0xb2, 0xa5, 0xf1, 0x5a,
	0xfe, 0xf5, 0x8f, 0x37, 0x57, 0x81, 0x19, 0x1a, 0xf5, 0x29, 0x08, 0x65, 0xaa, 0x75, 0x81, 0x05,
	0xd7, 0x9f, 0x66, 0x21, 0xea, 0x1f, 0xe3, 0xbc, 0x8f, 0x01, 0x54, 0xd2, 0x72, 0xd6, 0xb9, 0x4f,
	0x52, 0xc0, 0xfc, 0xc8, 0xc2, 0x64, 0x75, 0xb5, 0x92, 0x1a, 0x8a, 0x4a, 0x3a, 0x52, 0x65, 0xed,
	0xa4, 0xf4, 0x12, 0xbe, 0x4d, 0x85, 0xd7, 0xad, 0xe5, 0xf6, 0xbf, 0x96, 0x32, 0xe6, 0x79, 0x7b,
	0x20, 0x45, 0x75, 0xe0, 0xdc, 0x10, 0x67, 0x34, 0x03, 0x47, 0xb6, 0x49, 0x37, 0xbc, 0x61, 0xff,
	0x13, 0xdd, 0x84, 0xf9, 0x0e, 0x76, 0xdb, 0x44, 0xf6, 0x3d, 0x59, 0xd5, 0x06, 0x14, 0x98, 0x88,
	0x62, 0x06, 0xe4, 0x95, 0xec, 0x32, 0xd0, 0x9f, 0x01, 0x38, 0x99, 0x80, 0xd0, 0x25, 0x38, 0x8e,
	0x2d, 0x8b, 0xb5, 0xa9, 0x08, 0x74, 0xcf, 0x45, 0x22, 0xc6, 0x66, 0x74, 0x19, 0x4e, 0x08, 0x0f,
	0x53, 0xbe, 0x45, 0xbc, 0x40, 0xe8, 0x98, 0xd3, 0xb7, 0xa3, 0x2a, 0x2c, 0x08, 0x26, 0xb0, 0x5b,
	0x8f, 0x4c, 0x1e, 0xb1, 0xe5, 0xf4, 0xc4, 0xe4, 0x19, 0x89, 0xdf, 0xed, 0xc3, 0xfa, 0x7d, 0x58,
	0xec, 0xcb, 0x58, 0xeb, 0xa6, 0x24, 0x38, 0xe3, 0xa4, 0x27, 0x86, 0xec, 0x25, 0x80, 0xe5, 0xa1,
	0xa1, 0xe3, 0xeb, 0xff, 0x8f, 0xfd, 0x57, 0x7f, 0xe5, 0x60, 0x5e, 0x56, 0x89, 0x5e, 0x65, 0xe1,
	0x58, 0xf4, 0xbc, 0x4b, 0xa7, 0x4d, 0x5b, 0x48, 0x50, 0xaf, 0xfc, 0x81, 0x10, 0xf5, 0xa6, 0x7f,
	0x04, 0xbb, 0x7e, 0xe6, 0x27, 0x9f, 0xbf, 0xbf, 0xc8, 0xbe, 0x07, 0x1b, 0x2e, 0x7a, 0x60, 0xa4,
	0x97, 0x5f, 0xf8, 0x96, 0x8c, 0x9d, 0xb4, 0xd2, 0x3d, 0x63, 0xe7, 0xf8, 0xe6, 0xe8, 0x19, 0x3b,
	0xe9, 0x1d, 0xd1, 0x3b, 0xee, 0x1a, 0x6c, 0x82, 0x1e, 0xba, 0xf7, 0x4f, 0x72, 0x21, 0x01, 0xf3,
	0xc1, 0xe0, 0x16, 0x87, 0x3e, 0x4a, 0xb5, 0xfc, 0x57, 0x6f, 0x56, 0x2f, 0xf7, 0x15, 0x52, 0x91,
	0x32, 0xa0, 0x64, 0xb9, 0x07, 0xd0, 0x3b, 0x00, 0x95, 0x53, 0xa7, 0xf4, 0xfa, 0xd0, 0x54, 0x03,
	0x3c, 0xd4, 0xe5, 0xb3, 0x7a, 0xc4, 0xf5, 0xae, 0xf4, 0xeb, 0x35, 0xd0, 0xe2, 0x69, 0xf5, 0x0e,
	0x14, 0xb8, 0x76, 0x6d, 0xff, 0x50, 0x03, 0x07, 0x87, 0x1a, 0xf8, 0x76, 0xa8, 0x81, 0xe7, 0x47,
	0x5a, 0xe6, 0xe0, 0x48, 0xcb, 0x7c, 0x39, 0xd2, 0x32, 0x1b, 0x28, 0x2e, 0xc4, 0x26, 0x1d, 0x43,
	0x74, 0x5b, 0x84, 0x6f, 0x8e, 0xca, 0x7f, 0x9f, 0x1b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0xf5, 0x7c, 0xea, 0x30, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries Address.
	Address(ctx context.Context, in *QueryAddress, opts ...grpc.CallOption) (*QueryAddressResponse, error)
	// Queries Stats.
	Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	// Queries StatsByDestinationDomain.
	StatsByDestinationDomain(ctx context.Context, in *QueryStatsByDestinationDomain, opts ...grpc.CallOption) (*QueryStatsByDestinationDomainResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Address(ctx context.Context, in *QueryAddress, opts ...grpc.CallOption) (*QueryAddressResponse, error) {
	out := new(QueryAddressResponse)
	err := c.cc.Invoke(ctx, "/noble.autocctp.v1.Query/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.autocctp.v1.Query/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StatsByDestinationDomain(ctx context.Context, in *QueryStatsByDestinationDomain, opts ...grpc.CallOption) (*QueryStatsByDestinationDomainResponse, error) {
	out := new(QueryStatsByDestinationDomainResponse)
	err := c.cc.Invoke(ctx, "/noble.autocctp.v1.Query/StatsByDestinationDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries Address.
	Address(context.Context, *QueryAddress) (*QueryAddressResponse, error)
	// Queries Stats.
	Stats(context.Context, *QueryStats) (*QueryStatsResponse, error)
	// Queries StatsByDestinationDomain.
	StatsByDestinationDomain(context.Context, *QueryStatsByDestinationDomain) (*QueryStatsByDestinationDomainResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Address(ctx context.Context, req *QueryAddress) (*QueryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (*UnimplementedQueryServer) Stats(ctx context.Context, req *QueryStats) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedQueryServer) StatsByDestinationDomain(ctx context.Context, req *QueryStatsByDestinationDomain) (*QueryStatsByDestinationDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsByDestinationDomain not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.autocctp.v1.Query/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Address(ctx, req.(*QueryAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.autocctp.v1.Query/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StatsByDestinationDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsByDestinationDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StatsByDestinationDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.autocctp.v1.Query/StatsByDestinationDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StatsByDestinationDomain(ctx, req.(*QueryStatsByDestinationDomain))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.autocctp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Address",
			Handler:    _Query_Address_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "StatsByDestinationDomain",
			Handler:    _Query_StatsByDestinationDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/autocctp/v1/query.proto",
}

func (m *QueryAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FallbackRecipient) > 0 {
		i -= len(m.FallbackRecipient)
		copy(dAtA[i:], m.FallbackRecipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FallbackRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationDomainStats) > 0 {
		for k := range m.DestinationDomainStats {
			v := m.DestinationDomainStats[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalTransferred != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalTransferred))
		i--
		dAtA[i] = 0x18
	}
	if m.Transfers != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Transfers))
		i--
		dAtA[i] = 0x10
	}
	if m.Accounts != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Accounts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsByDestinationDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsByDestinationDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsByDestinationDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsByDestinationDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsByDestinationDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsByDestinationDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalTransferred != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalTransferred))
		i--
		dAtA[i] = 0x18
	}
	if m.Transfers != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Transfers))
		i--
		dAtA[i] = 0x10
	}
	if m.Accounts != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Accounts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovQuery(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FallbackRecipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DestinationDomainStats) > 0 {
		for k, v := range m.DestinationDomainStats {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovQuery(uint64(k)) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DomainStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accounts != 0 {
		n += 1 + sovQuery(uint64(m.Accounts))
	}
	if m.Transfers != 0 {
		n += 1 + sovQuery(uint64(m.Transfers))
	}
	if m.TotalTransferred != 0 {
		n += 1 + sovQuery(uint64(m.TotalTransferred))
	}
	return n
}

func (m *QueryStatsByDestinationDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovQuery(uint64(m.DestinationDomain))
	}
	return n
}

func (m *QueryStatsByDestinationDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accounts != 0 {
		n += 1 + sovQuery(uint64(m.Accounts))
	}
	if m.Transfers != 0 {
		n += 1 + sovQuery(uint64(m.Transfers))
	}
	if m.TotalTransferred != 0 {
		n += 1 + sovQuery(uint64(m.TotalTransferred))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomainStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationDomainStats == nil {
				m.DestinationDomainStats = make(map[uint32]DomainStats)
			}
			var mapkey uint32
			mapvalue := &DomainStats{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DomainStats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DestinationDomainStats[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			m.Accounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			m.Transfers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transfers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTransferred", wireType)
			}
			m.TotalTransferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTransferred |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsByDestinationDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsByDestinationDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsByDestinationDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsByDestinationDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsByDestinationDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsByDestinationDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			m.Accounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			m.Transfers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transfers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTransferred", wireType)
			}
			m.TotalTransferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTransferred |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
